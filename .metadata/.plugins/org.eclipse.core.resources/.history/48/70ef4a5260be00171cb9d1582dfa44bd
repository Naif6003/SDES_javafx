package application;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;


public class Main extends Application {
	
	public static void main(String[] args) {
		launch(args);
	}
	@Override
    public void start(Stage primaryStage) {
		
        primaryStage.setTitle("SDES");
        GridPane gd = new GridPane();
        gd.setAlignment(Pos.CENTER);
        gd.setHgap(10);
        gd.setVgap(10);
        gd.setPadding(new Insets(25, 25, 25, 25));
        
        
        Scene scene = new Scene(gd, 300, 275);
        primaryStage.setScene(scene);
        
        Text scenetitle = new Text("Encrypt or Decrypt");
        scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        gd.add(scenetitle, 0, 0, 2, 1);

        Label keyLabel = new Label("Key: ");
        gd.add(keyLabel, 0, 1);
        
        
        TextField getKey = new TextField();
        gd.add(getKey, 1, 1);

        Label inputLabel = new Label("Input:");
        gd.add(inputLabel, 0, 2);

        PasswordField pwBox = new PasswordField();
        gd.add(pwBox, 1, 2);
        
        
        Button encryptBtn = new Button("Encrypt");
        HBox hbBtn = new HBox(10);
        hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
        hbBtn.getChildren().add(encryptBtn);
        gd.add(hbBtn, 1, 4);
        
        TextField getInput = new TextField();
        gd.add(getInput,1, 2);
        
        TextField results = new TextField();
        gd.add(results, 1, 5);
        
        
        encryptBtn.setOnAction(e -> {
        	 
        	SDESimplementation sdesimplementation = new SDESimplementation();
        	SDES sdes = new SDES();
        	byte[] key = sdes.stringToByte(getKey.getText());
        	byte[] input = sdes.stringToByte(getInput.getText());
            byte cipherText[] = sdesimplementation.Encrypt(key,input);
            results.setText(byteListToString(cipherText));
                
        });
        
        Button decryptBtn = new Button("Decrypt");
        HBox hbBtn2 = new HBox(10);
        hbBtn2.setAlignment(Pos.BOTTOM_LEFT);
        hbBtn2.getChildren().add(encryptBtn);
        gd.add(hbBtn, 1, 5);
        
        
        primaryStage.show();
        
    }
	
	public static String byteListToString(byte[] l) {
	    if (l == null) {
	        return "" ;
	    }
	    StringBuilder sb = new StringBuilder(l.length-1);

	    for (Byte current : l) {
	        sb.append(current);
	    }

	    return sb.toString();
	}
}

 class SDESimplementation {

    public byte[] Encrypt(byte[] rawkey, byte[] plaintext){
		SDES sdes = new SDES();
		sdes.keyGenerator(rawkey);

		return (sdes.finalPermutation(sdes.fK(sdes.switchFunction(sdes.fK(
		        sdes.initialPermutation(plaintext),sdes.K1)),sdes.K2)));
	}

	public byte[] Decrypt(byte[] rawkey, byte[] ciphertext){
        SDES sdes = new SDES();
        sdes.keyGenerator(rawkey);

        return (sdes.finalPermutation(sdes.fK(sdes.switchFunction(sdes.fK(
                sdes.initialPermutation(ciphertext),sdes.K2)),sdes.K1)));
	}
}