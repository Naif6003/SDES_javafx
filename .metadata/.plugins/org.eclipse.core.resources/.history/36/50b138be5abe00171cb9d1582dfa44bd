package application;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;


public class Main extends Application {
	
	public static void main(String[] args) {
		launch(args);
	}
	@Override
    public void start(Stage primaryStage) {
		
        primaryStage.setTitle("SDES");
        GridPane gd = new GridPane();
        gd.setAlignment(Pos.CENTER);
        gd.setHgap(10);
        gd.setVgap(10);
        gd.setPadding(new Insets(25, 25, 25, 25));
        
        
        Scene scene = new Scene(gd, 300, 275);
        primaryStage.setScene(scene);
        
        Text scenetitle = new Text("Encrypt or Decrypt");
        scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
        gd.add(scenetitle, 0, 0, 2, 1);

        Label keyLabel = new Label("Key: ");
        gd.add(keyLabel, 0, 1);
        
        
        TextField getKey = new TextField();
        gd.add(getKey, 1, 1);

        Label inputLabel = new Label("Input:");
        gd.add(inputLabel, 0, 2);

        PasswordField pwBox = new PasswordField();
        gd.add(pwBox, 1, 2);
        
        
        Button encryptBtn = new Button("Encrypt");
        HBox hbBtn = new HBox(10);
        hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
        hbBtn.getChildren().add(encryptBtn);
        gd.add(hbBtn, 1, 4);
        
        TextField getInput = new TextField();
        gd.add(getInput,1, 2);
        
        encryptBtn.setOnAction(e -> {
        	 
            byte cipherText[] = Encrypt(getKey,getInput);
            for (byte cipher:cipherText)
                System.out.print(cipher+" ");
                System.out.println();

            System.out.println("Plain text after Decryption");
            byte plainText[] = Decrypt(key,cipherText);
            for (byte plain:plainText) {
                System.out.print(plain+" ");

//            @Override
//            public void handle(ActionEvent e) {
//                actiontarget.setFill(Color.FIREBRICK);
//                actiontarget.setText("Sign in button pressed");
//                System.out.println(userTextField.getText());
//            }
        });
        
        primaryStage.show();
        
    }
}

 class SDESimplementation {

    public static byte[] Encrypt(byte[] rawkey, byte[] plaintext){
		SDES sdes = new SDES();
		sdes.keyGenerator(rawkey);

		return (sdes.finalPermutation(sdes.fK(sdes.switchFunction(sdes.fK(
		        sdes.initialPermutation(plaintext),sdes.K1)),sdes.K2)));
	}

	public static byte[] Decrypt(byte[] rawkey, byte[] ciphertext){
        SDES sdes = new SDES();
        sdes.keyGenerator(rawkey);

        return (sdes.finalPermutation(sdes.fK(sdes.switchFunction(sdes.fK(
                sdes.initialPermutation(ciphertext),sdes.K2)),sdes.K1)));
	}
}